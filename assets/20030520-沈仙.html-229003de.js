import{_ as a,X as r,Y as E,$ as e,a2 as d,a0 as o,Z as t,E as i}from"./framework-71fc1c0e.js";const n="/3w-platform/assets/2022front_end-6771b313.png",p="/3w-platform/assets/react-ec1c79fd.png",u="/3w-platform/assets/spring-65a10870.png",A={},B=t('<h1 id="关于前后端主流框架的调查报告" tabindex="-1"><a class="header-anchor" href="#关于前后端主流框架的调查报告" aria-hidden="true">#</a> 关于前后端主流框架的调查报告</h1><h2 id="调查目的" tabindex="-1"><a class="header-anchor" href="#调查目的" aria-hidden="true">#</a> 调查目的</h2><p>调查前后端主流框架的优缺点，以及适用场景，为后续的项目开发提供参考。</p><h2 id="调查结果" tabindex="-1"><a class="header-anchor" href="#调查结果" aria-hidden="true">#</a> 调查结果</h2><h3 id="前端开发场景" tabindex="-1"><a class="header-anchor" href="#前端开发场景" aria-hidden="true">#</a> 前端开发场景</h3><p>前端开发主要分为两种场景，一种是传统的网页开发，另一种是移动端开发。传统的网页开发主要是以 PC 端为主，移动端开发主要是以手机端为主。主要都是负责前端的页面开发，以及与后端的交互。 具体而言，前端的主要工作包括以下几个方面：</p><ul><li><p>页面开发<br> 页面开发主要是负责网页的页面设计和排版，通过 HTML 和 CSS 实现网页的布局和样式，以及网页的静态效果</p></li><li><p>交互开发 交互开发主要是负责网页的交互逻辑，通过 JavaScript 实现网页的动态效果，例如网页的点击事件、鼠标移动事件、键盘事件等</p></li><li><p>与后端的交互 与后端的交互主要是负责前端与后端的数据交互，通过 AJAX 实现前后端的数据交互，例如网页的登录、注册、购物等功能</p></li><li><p>移动端开发 移动端开发主要是负责手机端的页面开发，通过 HTML5 和 CSS3 实现手机端的页面开发，例如微信小程序、H5 页面等</p></li><li><p>桌面端开发 桌面端开发主要是负责桌面端的页面开发，通过 Electron 实现桌面端的页面开发，例如微信桌面端、QQ 桌面端等</p></li><li><p>性能优化 通过代码优化，提高网页的性能，减少网页的加载时间，例如可以使用 Webpack 对代码进行打包，减少 HTTP 请求次数，提高网页的加载速度</p></li></ul><h3 id="前端主流框架" tabindex="-1"><a class="header-anchor" href="#前端主流框架" aria-hidden="true">#</a> 前端主流框架</h3><p>前端主流开发框架主要包括以下几种：</p><ul><li><p><code>Angular</code></p><p><code>Angular</code> 是由 <code>Google</code> 推出的一款前端 <code>JavaScript</code> 框架，用于构建单页应用程序。</p><p>优点：</p><ul><li>双向数据绑定：<code>Angular</code> 支持双向数据绑定，可以将表单元素和数据模型进行双向绑定，使得开发者可以更加方便地处理表单数据。</li><li>组件化：<code>Angular</code> 提供了组件化的开发方式，可以将页面拆分为多个组件，使得代码更加模块化，易于维护和重用。</li><li>依赖注入：<code>Angular</code> 支持依赖注入，可以将组件之间的依赖关系进行解耦，使得代码更加灵活可扩展。</li><li><code>TypeScript</code>：<code>Angular</code> 使用 <code>TypeScript</code> 作为默认的开发语言，可以提供更加严格的类型检查和面向对象的编程方式，使得代码更加健壮和可维护。</li></ul><p>缺点：</p><ul><li>学习曲线：相对于其他前端框架，Angular 的学习曲线可能会稍微陡峭一些，需要一定的时间和精力来掌握其核心概念和使用方法。</li><li>性能问题：<code>Angular</code> 的性能可能会受到复杂页面的影响，需要优化和调整页面结构和组件的使用方式。</li><li>生态系统：相对于 <code>React</code> 和 <code>Vue</code>，<code>Angular</code> 的生态系统相对较小，可能会导致一些库或工具的不兼容性问题。</li></ul></li><li><p><code>VueJS</code><br><code>Vue</code> 是一款由尤雨溪开发的渐进式 <code>JavaScript</code> 框架，用于构建用户界面。</p><p>优点：</p><ul><li>数据驱动：<code>Vue</code> 采用数据驱动的方式来更新页面，可以自动追踪数据的变化，并相应地更新页面，使得开发者可以更加专注于数据和业务逻辑的实现。</li><li>组件化：<code>Vue</code> 提供了组件化的开发方式，可以将页面拆分为多个组件，使得代码更加模块化，易于维护和重用。</li><li>双向数据绑定：<code>Vue</code> 支持双向数据绑定，可以将表单元素和数据模型进行双向绑定，使得开发者可以更加方便地处理表单数据。</li><li>社区支持：<code>Vue</code> 拥有庞大的社区，提供了丰富的文档和实用的工具，使得开发者可以更加轻松地学习和使用 <code>Vue</code>。 缺点：</li><li>学习曲线：相对于传统的模板引擎，Vue 的学习曲线可能会稍微陡峭一些，需要一定的时间和精力来掌握其核心概念和使用方法。</li></ul><p>缺点：</p><ul><li>生态系统：Vue 生态系统的更新速度非常快，可能会导致某些库或工具的不兼容性问题。</li><li>性能问题：Vue 的性能可能会受到复杂页面的影响，需要优化和调整页面结构和组件的使用方式。</li></ul></li><li><p><code>React</code><br><code>React</code> 是一个由 Facebook 推出的 JavaScript 库，用于构建用户界面。</p><p>优点：</p><ul><li>组件化：<code>React</code> 提供了组件化的开发方式，可以将页面拆分为多个组件，使得代码更加模块化，易于维护和重用。</li><li>虚拟 DOM：<code>React</code> 通过虚拟 DOM 的方式来更新页面，相比于直接操作 DOM，可以大大提高页面的性能和响应速度。</li><li>JSX：<code>React</code> 允许使用 JSX 语法来描述组件的结构和样式，使得代码更加简洁易懂。</li><li>社区支持：<code>React</code> 拥有庞大的社区，提供了丰富的文档和实用的工具，使得开发者可以更加轻松地学习和使用 <code>React</code>。</li></ul><p>缺点：</p><ul><li>学习曲线：相对于传统的模板引擎，<code>React</code> 的学习曲线可能会稍微陡峭一些，需要一定的时间和精力来掌握其核心概念和使用方法。</li><li>生态系统：<code>React</code> 生态系统的更新速度非常快，可能会导致某些库或工具的不兼容性问题。</li><li>只关注视图层：<code>React</code> 只关注视图层的构建，对于其他方面的问题（例如路由、状态管理等），需要使用其他库或框架来解决。</li></ul></li><li><p><code>NextJS</code></p><p><code>NextJS</code> 是一个 <code>React</code> 框架，提供了一些有用的功能，例如服务器渲染、静态导出、预渲染等，使得构建 <code>React</code> 应用程序更加容易和高效。</p><p>优点：</p><ul><li>服务端渲染：<code>NextJS</code> 具有内置的服务端渲染功能，可以最大限度地优化首屏加载时间。此外，它还支持动态路由，使得应用程序的路由更加灵活。</li><li>静态导出：<code>NextJS</code> 可以将页面预渲染为静态 HTML 文件，从而提高应用程序的性能和可访问性。</li><li>集成优秀工具：<code>NextJS</code> 集成了许多优秀的工具，例如 Webpack、Babel 和 <code>React</code> 热更新等，使得开发者可以更加高效地开发和调试应用程序。</li><li>社区支持：<code>NextJS</code> 拥有活跃的社区，提供了广泛的文档和实用的资源，使得开发者可以更加轻松地学习和使用 <code>NextJS</code>。</li></ul><p>缺点：</p><ul><li>学习曲线：相对于其他 <code>React</code> 框架，<code>NextJS</code> 的学习曲线可能会稍微陡峭一些，需要一定的时间和精力来掌握其核心概念和功能。</li><li>限制性：<code>NextJS</code> 的某些功能可能会对开发者的自由度造成一定的限制，例如对文件和目录结构的要求等。</li><li>构建时间：使用 <code>NextJS</code> 进行服务端渲染和预渲染可能会导致构建时间较长，需要花费更多的时间和资源。</li></ul></li><li><p><code>NuxtJs</code><br><code>NuxtJS</code> 是一个基于 <code>Vue</code> 的通用应用框架，用于构建 <code>SSR</code>（<code>Server Side Render</code>）应用。</p><p>优点：</p><ul><li>快速开发：<code>NuxtJS</code> 提供了许多常用的功能和配置，使得开发者可以更加快速地搭建应用程序。</li><li>SEO：<code>NuxtJS</code> 支持 SSR，可以在服务器端渲染页面，使得搜索引擎可以更好地索引页面内容，提高 SEO 的效果。</li><li>自动化配置：<code>NuxtJS</code> 自动化处理了许多配置，减少了开发者的重复性工作，提高了开发效率。</li><li>插件机制：<code>NuxtJS</code> 提供了丰富的插件机制，可以轻松地集成第三方库或插件，并且自动处理相关配置。</li></ul><p>缺点：</p><ul><li>学习曲线：相对于 <code>Vue</code>，<code>NuxtJS</code> 的学习曲线可能会稍微陡峭一些，需要一定的时间和精力来掌握其核心概念和使用方法。</li><li>约束性：<code>NuxtJS</code> 的一些约束性规则可能会限制开发者的自由度，需要遵循一些框架的规范和约定。</li><li>SSR 的性能问题：SSR 应用程序的性能可能会受到服务器资源的限制，需要进行优化和调整页面结构和组件的使用方式。</li></ul></li></ul><p>这是一张<code>stackOverflow</code>的 2022 的年度总结，从全球<code>web</code>发展角度来看，框架之争已经从第一阶段的前端框架之争（比如<code>Vue</code>、<code>React</code>、<code>Angular</code>等），过渡到第二阶段的全栈框架之争（比如<code>Next</code>、<code>Nuxt</code>、<code>Remix</code>等） <img src="'+n+'" alt="目前前端受欢迎的框架" loading="lazy"></p><h3 id="react-的相关技术" tabindex="-1"><a class="header-anchor" href="#react-的相关技术" aria-hidden="true">#</a> React 的相关技术</h3><h4 id="react-的周边库" tabindex="-1"><a class="header-anchor" href="#react-的周边库" aria-hidden="true">#</a> React 的周边库</h4><ul><li><code>React Router</code>：是一个基于 <code>React</code>的路由库，用于构建单页应用。它允许我们在不刷新页面的情况下切换视图。</li><li><code>Redux</code>：是一个状态管理库，用于管理 <code>JavaScript</code> 应用程序的状态。<code>Redux</code> 是一个可预测的状态容器，它帮助你管理应用的状态，使其行为一致且可预测。</li><li><code>MobX</code>：是另一个流行的状态管理库，它通过透明的函数响应式编程和可观察性的概念使状态管理变得简单直观。</li><li><code>Axios</code>：是一个基于 <code>promise</code> 的 <code>HTTP</code> 客户端，用于浏览器和 <code>Node.js</code>。<code>Axios</code> 使得 <code>API</code> 的请求和处理变得更加容易。</li></ul><p><code>React</code>的架构图是非常复杂的，因为它需要与各种库和工具配合使用。简单来说，一个典型的 <code>React</code>应用程序的架构可能包括以下几个部分：React 组件、状态管理库（如 Redux 或 MobX）、路由库（如 <code>React Router</code>）、API 请求库（如 Axios）等。这些部分共同构成了一个强大的前端应用架构。</p><h4 id="react-的技术架构图" tabindex="-1"><a class="header-anchor" href="#react-的技术架构图" aria-hidden="true">#</a> React 的技术架构图</h4><figure><img src="'+p+'" alt="React 的技术架构图" tabindex="0" loading="lazy"><figcaption>React 的技术架构图</figcaption></figure><h3 id="后端开发场景" tabindex="-1"><a class="header-anchor" href="#后端开发场景" aria-hidden="true">#</a> 后端开发场景</h3><p>后端开发主要包括以下几种场景：</p><ul><li>服务端渲染：<br> 服务端渲染是指在服务器端将页面渲染为 HTML 文件，然后将其发送到客户端，客户端收到响应后直接展示页面内容。服务端渲染可以提高首屏加载时间，从而提高应用程序的性能和可访问性。</li><li>静态导出：<br> 静态导出是指在构建时将页面预渲染为静态 HTML 文件，然后将其发送到客户端，客户端收到响应后直接展示页面内容。静态导出可以提高应用程序的性能和可访问性，但是不支持动态路由。</li><li>客户端渲染：<br> 客户端渲染是指在客户端将页面渲染为 HTML 文件，然后将其发送到客户端，客户端收到响应后直接展示页面内容。客户端渲染可以提高应用程序的性能和可访问性，但是可能会导致首屏加载时间较长。</li><li>API：<br> API 是指在服务器端提供接口，客户端通过接口获取数据，然后将其展示到页面上。API 可以提高应用程序的性能和可访问性，但是需要开发者自己实现页面的渲染逻辑。</li><li>代理：<br> 代理是指在服务器端代理客户端的请求，然后将其发送到其他服务器，最后将响应返回给客户端。代理可以提高应用程序的性能和可访问性，但是需要开发者自己实现页面的渲染逻辑。</li><li>数据库：<br> 数据库是指在服务器端存储数据，客户端通过接口获取数据，然后将其展示到页面上。数据库可以提高应用程序的性能和可访问性，但是需要开发者自己实现页面的渲染逻辑。</li><li>服务器：<br> 服务器是指在服务器端运行应用程序，客户端通过接口获取数据，然后将其展示到页面上。服务器可以提高应用程序的性能和可访问性，但是需要开发者自己实现页面的渲染逻辑。</li></ul><h3 id="后端主流框架" tabindex="-1"><a class="header-anchor" href="#后端主流框架" aria-hidden="true">#</a> 后端主流框架</h3><p>后端目前主流的框架主要包括以下几种：</p><ul><li><p><code>Spring</code> 框架 <code>Spring</code> 框架是一款 <code>Java</code> 开发框架，适用于构建企业级应用程序。它提供了大量的功能模块和插件，例如 <code>Spring MVC</code>、S<code>pring Boot</code>、<code>Spring Security</code> 等，可以快速搭建后端应用程序。<br> 优点</p><ul><li>是具有良好的扩展性和灵活性，可以与众多的第三方库和框架集成。</li><li>提供了丰富的文档和实用的工具，使得开发者可以更加轻松地学习和使用 <code>Spring</code>。</li></ul><p>缺点</p><ul><li>学习曲线较为陡峭，需要具备相当的 <code>Java</code> 基础和编程经验。</li><li>由于 Spring 框架的复杂性，可能会导致应用程序的性能较低。</li></ul></li><li><p><code>Django</code> 框架 <code>Django</code> 框架是一款 <code>Python</code> 开发框架，适用于构建 <code>Web</code> 应用程序和 <code>API</code> 接口。它具有强大的 <code>ORM</code> 支持，便于进行数据库设计和管理。此外，<code>Django</code> 还提供了许多有用的插件和工具，例如 <code>Django REST framework</code>、<code>Django CMS</code> 等。<br> 优点</p><ul><li>易于上手，具有良好的可维护性和安全性。</li></ul><p>缺点</p><ul><li>性能相对较低，不适合处理高并发请求。</li></ul></li><li><p><code>Ruby on Rails</code> 框架<br><code>Ruby on Rails</code> 框架是一款 <code>Ruby</code> 开发框架，适用于快速构建 <code>Web</code> 应用程序。它采用了 <code>MVC</code> 架构模式，提供了强大的 <code>ORM</code> 支持和模板引擎等功能。</p><p>优点</p><ul><li>具有高效的开发效率和灵活的扩展性。</li></ul><p>缺点</p><ul><li>性能较低，不适合处理高并发请求。</li></ul></li><li><p><code>Node.js</code> 框架 <code>Node.js</code> 框架是一款 <code>JavaScript</code> 开发框架，适用于构建 <code>Web</code> 应用程序和 <code>API</code> 接口。它采用了单线程事件驱动模型，具有高效的 <code>I/O</code> 操作和异步编程特性。</p><p>优点</p><ul><li>是具有高效的处理能力和良好的可扩展性。</li></ul><p>缺点</p><ul><li>对开发人员的要求较高，需要具备一定的 <code>JavaScript</code> 编程经验。</li></ul></li></ul><h3 id="spring-的技术架构图" tabindex="-1"><a class="header-anchor" href="#spring-的技术架构图" aria-hidden="true">#</a> Spring 的技术架构图</h3><h4 id="srping-的插件" tabindex="-1"><a class="header-anchor" href="#srping-的插件" aria-hidden="true">#</a> Srping 的插件</h4><ul><li><p><code>Spring Boot</code><code>Spring Boot</code> 是一款基于 Spring 框架的开发框架，它提供了一系列的插件和工具，可以快速搭建后端应用程序。此外，Spring Boot 还提供了丰富的文档和实用的工具，使得开发者可以更加轻松地学习和使用 Spring。</p></li><li><p><code>Spring Cloud</code><code>Spring Cloud</code> 是一款基于 <code>Spring Boot</code> 的开发框架，它提供了一系列的插件和工具，可以快速搭建后端应用程序。此外，<code>Spring Cloud</code> 还提供了丰富的文档和实用的工具，使得开发者可以更加轻松地学习和使用 Spring。</p></li><li><p><code>Spring Security</code></p><p><code>Spring Security</code> 是一款基于 <code>Spring Boot</code> 的开发框架，它提供了一系列的插件和工具，可以快速搭建后端应用程序。此外，<code>Spring Security</code> 还提供了丰富的文档和实用的工具，使得开发者可以更加轻松地学习和使用 Spring。</p></li><li><p><code>Spring MVC</code><code>Spring MVC</code> 是一款基于 <code>Spring Boot</code> 的开发框架，它提供了一系列的插件和工具，可以快速搭建后端应用程序。此外，<code>Spring MVC</code> 还提供了丰富的文档和实用的工具，使得开发者可以更加轻松地学习和使用 Spring。</p></li></ul><h4 id="spring-的技术架构图-1" tabindex="-1"><a class="header-anchor" href="#spring-的技术架构图-1" aria-hidden="true">#</a> Spring 的技术架构图</h4><figure><img src="'+u+'" alt="Spring 的技术架构图" tabindex="0" loading="lazy"><figcaption>Spring 的技术架构图</figcaption></figure><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接</h2>',29),h={href:"https://juejin.cn/post/7053950913551007780",target:"_blank",rel:"noopener noreferrer"},s={href:"https://juejin.cn/post/7124551017382805518",target:"_blank",rel:"noopener noreferrer"},S={href:"https://zhuanlan.zhihu.com/p/476254647#:~:text=2022%20%E5%89%8D%E7%AB%AF%E8%A1%8C%E4%B8%9A%E7%9A%84%E8%B6%8B%E5%8A%BF%E6%80%BB%E7%BB%93%EF%BC%8C%E6%8A%BC%E5%AE%9DVue3%EF%BC%9F%201%201.%20%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6%2F%E5%B7%A5%E7%A8%8B%E5%8C%96%20%E9%9A%8F%E7%9D%80%20jQuery.js%20%E6%B8%90%E6%B8%90%E6%B7%A1%E5%87%BA%E4%BA%BA%E4%BB%AC%E7%9A%84%E8%A7%86%E9%87%8E%EF%BC%8C%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E6%88%90%E4%B8%BA%E4%BA%86%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98%E5%BF%85%E4%B8%8D%E5%8F%AF%E5%B0%91%E7%9A%84%E5%B7%A5%E5%85%B7%EF%BC%8C%E4%B9%9F%E6%88%90%E4%B8%BA%E5%A4%A7%E5%AE%B6%E6%9C%80%E4%B8%BA%E5%85%B3%E6%B3%A8%E7%9A%84%E4%B8%9C%E8%A5%BF%E3%80%82,%E2%86%93%20...%205%205.%20%E6%80%BB%E7%BB%93%20%E5%9C%A8%E5%B7%A5%E4%B8%9A4.0%E7%9A%84%E5%A4%A7%E8%83%8C%E6%99%AF%E4%B8%8B%EF%BC%8C%E9%9A%8F%E7%9D%80%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E3%80%81%E4%BA%91%E8%AE%A1%E7%AE%97%E3%80%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E3%80%81%E7%89%A9%E8%81%94%E7%BD%91%E3%80%81%E5%8C%BA%E5%9D%97%E9%93%BE%E7%AD%89%E4%BA%92%E8%81%94%E7%BD%91%E6%BD%AE%E6%B5%81%E6%8A%80%E6%9C%AF%E7%9A%84%E4%B8%8D%E6%96%AD%E6%8E%A8%E8%BF%9B%EF%BC%8C%E4%BA%92%E8%81%94%E7%BD%91%E8%A1%8C%E4%B8%9A%E8%B5%B0%E5%90%91%E5%B7%A5%E4%B8%9A%E5%8C%96%E5%92%8C%E6%99%BA%E8%83%BD%E5%8C%96%E3%80%82%20%E5%85%A8%E7%90%83%E7%96%AB%E6%83%85%E7%9A%84%E5%B8%B8%E6%80%81%E5%8C%96%EF%BC%8C%E8%B6%8A%E6%9D%A5%E8%B6%8A%E5%A4%9A%E7%9A%84%E5%85%AC%E5%8F%B8%E9%80%89%E6%8B%A9%E6%88%96%E8%80%85%E4%B8%8D%E5%BE%97%E4%B8%8D%E5%B1%85%E5%AE%B6%E5%8A%9E%E5%85%AC%EF%BC%88WFH%EF%BC%89%EF%BC%8C%E5%BF%85%E7%84%B6%E7%BB%99%E5%89%8D%E7%AB%AF%E8%A1%8C%E4%B8%9A%E5%B8%A6%E6%9D%A5%E6%9B%B4%E5%A4%9A%E7%9A%84%E6%9C%BA%E4%BC%9A%E3%80%82%20",target:"_blank",rel:"noopener noreferrer"},g={href:"https://zhuanlan.zhihu.com/p/554023066",target:"_blank",rel:"noopener noreferrer"},C={href:"https://juejin.cn/post/7236278986257629221",target:"_blank",rel:"noopener noreferrer"};function b(x,f){const c=i("ExternalLinkIcon"),l=i("Mermaid");return r(),E("div",null,[B,e("ul",null,[e("li",null,[e("a",h,[d("六千字漫谈 2022 后端框架流行趋势"),o(c)])]),e("li",null,[e("a",s,[d("尤雨溪解读 2022Web 前端生态趋势"),o(c)])]),e("li",null,[e("a",S,[d("2022 前端行业的趋势总结，押宝 Vue3"),o(c)])]),e("li",null,[e("a",g,[d("2022 年，web 开发后端框架就用这 10 个"),o(c)])]),e("li",null,[e("a",C,[d("未来全栈框架会卷方向"),o(c)])])]),o(l,{id:"mermaid-576",code:"eJxLy8kvT85ILCpRCHHhcox+PnP3071TXy7c+nLuolgFXV27mhf7Jj9tXfp8yopnHdufTuh9Oqnn6fq25wsaaxScol/sWv1k994X65a8WN8Yy+UEUq9QA+E+65jwtGt+jYJz9LNp7c9XL3i+buHzCW1Qg7mcwUpdql82dD7rXvlscu+TvXNquVwgBjybtuHponkQbTUKrkADEHyYAVClz/dMe7FvIkypWzQyH03p044FL2cugSl1j0bmx3K5Qq3un/Bk1xKgq7nc0AXcwQLOXAD+AKKg"})])}const _=a(A,[["render",b],["__file","20030520-沈仙.html.vue"]]);export{_ as default};
