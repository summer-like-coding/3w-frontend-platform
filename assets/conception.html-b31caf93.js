import{_ as e,X as c,Y as d,Z as o}from"./framework-71fc1c0e.js";const a={},i=o('<h3 id="常见位运算" tabindex="-1"><a class="header-anchor" href="#常见位运算" aria-hidden="true">#</a> 常见位运算</h3><h4 id="与运算" tabindex="-1"><a class="header-anchor" href="#与运算" aria-hidden="true">#</a> 与运算</h4><p>通过<code>n&amp;(n-1)</code>可以将<code>n</code>的二进制表示中的最低位的<code>1</code>变为<code>0</code>。 用处:</p><ul><li>判断一个数是否是<code>2</code>的幂:因为如果是<code>2</code>的幂,那么他的二进制中只会有一个<code>1</code></li><li>判断一个数的二进制表示中有多少个<code>1</code>:因为每次都会将最低位的<code>1</code>变为<code>0</code>,所以每次都会消除一个<code>1</code>,直到<code>n</code>变为<code>0</code></li></ul><h4 id="异或运算" tabindex="-1"><a class="header-anchor" href="#异或运算" aria-hidden="true">#</a> 异或运算</h4><p>异或运算符的特点</p><ul><li>一个数和<code>0</code>做<code>XOR</code>运算等于本身: <code>a⊕0 = a</code></li><li>一个数和其本身做<code>XOR</code>运算等于<code>0</code>: <code>a⊕a = 0</code></li><li><code>XOR</code>运算满足交换律和结合律: <code>a⊕b⊕a = (a⊕a)⊕b = 0⊕b = b</code></li></ul><p>借助这个特性,我们可以判断一个数是否重复出现了偶数次,或者找出只出现了一次的数</p>',8),n=[i];function t(r,l){return c(),d("div",null,n)}const s=e(a,[["render",t],["__file","conception.html.vue"]]);export{s as default};
